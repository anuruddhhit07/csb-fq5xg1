{"version":3,"sources":["customChart/Chart.jsx","customChart/xAxis.jsx","customChart/yAxis.jsx","customChart/Line.jsx","useDimensions.js","customChart/LineChart.jsx","App.js","index.js"],"names":["ChartContext","createContext","useDimensionsContext","useContext","Chart","svgRef","dimensions","children","Provider","value","className","ref","transform","marginLeft","marginTop","id","x","y","width","boundedWidth","height","boundedHeight","XAxis","xScale","scale","numberOfTicks","ticks","formatTick","format","Fragment","stroke","x2","map","t","idx","x1","y1","y2","YAxis","yScale","Line","data","lineGenerator","line","d","index","curve","curveCardinal","style","fill","strokeWidth","strokeLinecap","useDimensions","useRef","useState","setWidth","setHeight","useEffect","element","current","resizeObserver","ResizeObserver","entry","contentRect","observe","unobserve","useMemo","DIMENSIONS","marginRight","marginBottom","innerPadding","LineChart","wrapperRef","zoomIdentity","currentGlobalZoomState","setCurrentGlobalZoomState","currentYZoomState","setCurrentYZoomState","currentXZoomState","setCurrentXZoomState","updatedDimensions","Math","max","scaleLinear","domain","length","range","newXScale","rescaleX","newYScale","rescaleY","svg","select","resetListener","zoomGlobal","zoom","scaleExtent","on","event","console","log","newK","k","newX","newY","prevK","prevX","prevY","point","target","sourceEvent","p","pointers","mean","center","isZoomingX","isZoomingY","translate","call","e","preventDefault","clipPath","App","Array","from","round","random","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.b8ae174d.chunk.js","sourcesContent":["import React, { createContext, useContext } from \"react\";\r\n\r\nconst ChartContext = createContext();\r\nexport const useDimensionsContext = () => useContext(ChartContext);\r\n\r\nconst Chart = ({ svgRef, dimensions, children }) => {\r\n  return (\r\n    <ChartContext.Provider value={dimensions}>\r\n      <svg className=\"Chart\" ref={svgRef}>\r\n        <g\r\n          transform={`translate(${dimensions.marginLeft}, ${dimensions.marginTop})`}\r\n        >\r\n          <defs>\r\n            <clipPath className=\"clip-path\" id=\"clip\">\r\n              <rect\r\n                x=\"0\"\r\n                y=\"0\"\r\n                width={dimensions.boundedWidth}\r\n                height={dimensions.boundedHeight}\r\n              />\r\n            </clipPath>\r\n          </defs>\r\n\r\n          {children}\r\n        </g>\r\n      </svg>\r\n    </ChartContext.Provider>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import React from \"react\";\r\nimport { format } from \"d3\";\r\nimport { useDimensionsContext } from \"./Chart\";\r\n\r\nconst XAxis = ({ scale: xScale }) => {\r\n  const dimensions = useDimensionsContext();\r\n  const numberOfTicks = dimensions.boundedHeight / 70;\r\n  const ticks = xScale.ticks(numberOfTicks);\r\n  const formatTick = format(\",\");\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <g\r\n        className=\"x-axis\"\r\n        transform={`translate(0, ${dimensions.boundedHeight})`}\r\n      >\r\n        <line\r\n          className=\"x-axis__line\"\r\n          stroke=\"#bdc3c7\"\r\n          x2={dimensions.boundedWidth}\r\n        />\r\n        {ticks.map((t, idx) => (\r\n          <React.Fragment key={`x-${idx}-${t}-container`}>\r\n            <line\r\n              className=\"x-axis__tick\"\r\n              key={`x-axis__tick-${idx}-${t}`}\r\n              x1={xScale(t)}\r\n              x2={xScale(t)}\r\n              y1={0}\r\n              y2={10}\r\n              stroke=\"#bdc3c7\"\r\n            />\r\n            <text\r\n              key={`x-axis__tick__label-${idx}-${t}`}\r\n              className=\"x-axis__tick__label\"\r\n              transform={`translate(${xScale(t)}, 25)`}\r\n            >\r\n              {formatTick(t)}\r\n            </text>\r\n          </React.Fragment>\r\n        ))}\r\n      </g>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default XAxis;\r\n","import React from \"react\";\r\nimport { format } from \"d3\";\r\nimport { useDimensionsContext } from \"./Chart\";\r\n\r\nconst YAxis = ({ scale: yScale }) => {\r\n  const dimensions = useDimensionsContext();\r\n  const numberOfTicks = dimensions.boundedHeight / 70;\r\n  const ticks = yScale.ticks(numberOfTicks);\r\n  const formatTick = format(\",\");\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <g className=\"y-axis\">\r\n        <line\r\n          key=\"y-axis__line\"\r\n          className=\"y-axis__line\"\r\n          y2={dimensions.boundedHeight}\r\n          stroke=\"#bdc3c7\"\r\n        />\r\n        {ticks.map((t, idx) => (\r\n          <React.Fragment key={`y-${t}-container-${idx}`}>\r\n            <line\r\n              className=\"y-axis__tick\"\r\n              key={`y-axis__tick-${idx}-${t}`}\r\n              x2=\"-10\"\r\n              y1={yScale(t)}\r\n              y2={yScale(t)}\r\n              stroke=\"#bdc3c7\"\r\n            />\r\n            <text\r\n              key={`y-axis__tick__label-${idx}-${t}`}\r\n              className=\"y-axis__tick__label\"\r\n              transform={`translate(-30, ${yScale(t)})`}\r\n            >\r\n              {formatTick(t)}\r\n            </text>\r\n          </React.Fragment>\r\n        ))}\r\n      </g>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default YAxis;\r\n","import React from \"react\";\r\nimport { curveCardinal, line } from \"d3\";\r\n\r\nconst Line = ({ xScale, yScale, data }) => {\r\n  const lineGenerator = line()\r\n    .x((d, index) => xScale(index))\r\n    .y((d) => yScale(d))\r\n    .curve(curveCardinal);\r\n\r\n  return (\r\n    <g className=\"line\">\r\n      <path\r\n        d={lineGenerator(data)}\r\n        stroke=\"red\"\r\n        style={{\r\n          fill: \"none\",\r\n          strokeWidth: \"3px\",\r\n          strokeLinecap: \"round\"\r\n        }}\r\n      />\r\n    </g>\r\n  );\r\n};\r\n\r\nexport default Line;\r\n","import React, { useEffect, useRef, useState, useMemo } from \"react\";\r\n\r\nconst useDimensions = () => {\r\n  const ref = useRef();\r\n  const [width, setWidth] = useState(0);\r\n  const [height, setHeight] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const element = ref.current;\r\n\r\n    const resizeObserver = new ResizeObserver(([entry]) => {\r\n      if (width !== entry.contentRect.width) {\r\n        setWidth(entry.contentRect.width);\r\n      }\r\n      if (height !== entry.contentRect.height) {\r\n        setHeight(entry.contentRect.height);\r\n      }\r\n    });\r\n    resizeObserver.observe(element);\r\n\r\n    return () => resizeObserver.unobserve(element);\r\n  }, [height, width]);\r\n\r\n  const dimensions = useMemo(\r\n    () => ({\r\n      width,\r\n      height\r\n    }),\r\n    [width, height]\r\n  );\r\n\r\n  return [ref, dimensions];\r\n};\r\n\r\nexport default useDimensions;\r\n","import React, { useRef, useEffect, useState } from \"react\";\r\nimport {\r\n  select,\r\n  pointers,\r\n  mean,\r\n  scaleLinear,\r\n  zoomIdentity,\r\n  max,\r\n  zoom,\r\n  zoomTransform\r\n} from \"d3\";\r\nimport throttle from \"lodash.throttle\";\r\n\r\nimport Chart from \"./Chart.jsx\";\r\nimport XAxis from \"./xAxis\";\r\nimport YAxis from \"./yAxis\";\r\nimport Line from \"./Line\";\r\nimport useDimensions from \"../useDimensions\";\r\n\r\nconst DIMENSIONS = {\r\n  marginTop: 15,\r\n  marginRight: 15,\r\n  marginBottom: 40,\r\n  marginLeft: 60,\r\n  innerPadding: 10\r\n};\r\n\r\nconst LineChart = ({ data, id = \"myZoomableLineChart\" }) => {\r\n  const svgRef = useRef();\r\n\r\n  const [wrapperRef, dimensions] = useDimensions();\r\n  const [currentGlobalZoomState, setCurrentGlobalZoomState] = useState(\r\n    zoomIdentity\r\n  );\r\n  const [currentYZoomState, setCurrentYZoomState] = useState(zoomIdentity);\r\n  const [currentXZoomState, setCurrentXZoomState] = useState(zoomIdentity);\r\n\r\n  const updatedDimensions = {\r\n    ...DIMENSIONS,\r\n    ...dimensions,\r\n    boundedHeight: Math.max(\r\n      dimensions.height - DIMENSIONS.marginTop - DIMENSIONS.marginBottom,\r\n      0\r\n    ),\r\n    boundedWidth: Math.max(\r\n      dimensions.width - DIMENSIONS.marginLeft - DIMENSIONS.marginRight,\r\n      0\r\n    )\r\n  };\r\n\r\n  const { boundedHeight, boundedWidth, innerPadding } = updatedDimensions;\r\n\r\n  const xScale = scaleLinear()\r\n    .domain([0, data.length - 1])\r\n    .range([innerPadding, boundedWidth - innerPadding]);\r\n\r\n  const yScale = scaleLinear()\r\n    .domain([0, max(data)])\r\n    .range([boundedHeight - innerPadding, innerPadding]);\r\n\r\n  if (currentXZoomState) {\r\n    const newXScale = currentXZoomState.rescaleX(xScale);\r\n    xScale.domain(newXScale.domain());\r\n  }\r\n\r\n  if (currentYZoomState) {\r\n    const newYScale = currentYZoomState.rescaleY(yScale);\r\n    yScale.domain(newYScale.domain());\r\n  }\r\n\r\n  useEffect(() => {\r\n    const svg = select(svgRef.current);\r\n    const resetListener = select(\".reset-listening-rect\");\r\n\r\n    // center the action (handles multitouch)\r\n    const center = (event, target) => {\r\n      if (event.sourceEvent) {\r\n        const p = pointers(event, target);\r\n        return [mean(p, (d) => d[0]), mean(p, (d) => d[1])];\r\n      }\r\n      return [boundedWidth / 2, boundedHeight / 2];\r\n    };\r\n\r\n    const zoomGlobal = zoom()\r\n      .scaleExtent([0.1, 500])\r\n      .on(\"zoom\", (event) => {\r\n        console.log(event.transform);\r\n        const { k: newK, x: newX, y: newY } = event.transform;\r\n        const { k: prevK, x: prevX, y: prevY } = currentGlobalZoomState;\r\n        const point = center(event, svg);\r\n\r\n        const isZoomingX =\r\n          point[0] > DIMENSIONS.marginLeft + 50 && point[0] < boundedWidth;\r\n        const isZoomingY =\r\n          point[1] > DIMENSIONS.marginTop && point[1] < boundedHeight - 50;\r\n\r\n        /* \r\n          Getting the transformations arguments from the new and the previous\r\n          transforms objects, in order to apply it to currentXZoomState & currentYZoomState\r\n          See https://github.com/d3/d3-zoom#transform_translate\r\n          && https://github.com/d3/d3-zoom#transform_scale for details\r\n\r\n        */\r\n        isZoomingX &&\r\n          setCurrentXZoomState(\r\n            currentXZoomState\r\n              .translate((newX - prevX) / prevK, 0)\r\n              .scale(newK / prevK)\r\n          );\r\n        isZoomingY &&\r\n          setCurrentYZoomState(\r\n            currentYZoomState\r\n              .translate(0, (newY - prevY) / prevK)\r\n              .scale(newK / prevK)\r\n          );\r\n\r\n        // Keeping track of the previous transform object\r\n        setCurrentGlobalZoomState(event.transform);\r\n      });\r\n\r\n    svg.call(zoomGlobal);\r\n\r\n    resetListener.on(\"contextmenu \", (e) => {\r\n      e.preventDefault();\r\n      svg.call(zoomGlobal.transform, zoomIdentity);\r\n      setCurrentGlobalZoomState(zoomIdentity);\r\n      setCurrentXZoomState(zoomIdentity);\r\n      setCurrentYZoomState(zoomIdentity);\r\n    });\r\n\r\n    return () => {\r\n      resetListener.on(\"contextmenu \", null);\r\n    };\r\n  }, [\r\n    boundedWidth,\r\n    boundedHeight,\r\n    currentXZoomState,\r\n    currentYZoomState,\r\n    currentGlobalZoomState,\r\n    xScale,\r\n    yScale\r\n  ]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div ref={wrapperRef} style={{ marginBottom: \"2rem\" }}>\r\n        <Chart dimensions={updatedDimensions} svgRef={svgRef}>\r\n          <XAxis scale={xScale} />\r\n          <YAxis scale={yScale} />\r\n          <g clipPath=\"url(#clip)\">\r\n            <Line xScale={xScale} yScale={yScale} data={data} />\r\n          </g>\r\n          <rect\r\n            className=\"reset-listening-rect\"\r\n            width={dimensions.width}\r\n            height={dimensions.height}\r\n            x={-DIMENSIONS.marginLeft}\r\n            y={-DIMENSIONS.marginTop}\r\n            fill=\"transparent\"\r\n          />\r\n        </Chart>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default LineChart;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport LineChart from \"./customChart/LineChart\";\n\nfunction App() {\n  const [data, setData] = useState(\n    Array.from({ length: 100 }, () => Math.round(Math.random() * 100))\n  );\n\n  return <LineChart data={data} />;\n}\n\nexport default App;\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}